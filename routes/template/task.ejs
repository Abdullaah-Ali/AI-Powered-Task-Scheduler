<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="initial-scale=1, width=device-width" />
  <title>Task Management</title>
  <link rel="stylesheet" href="/global.css" />
  <link rel="stylesheet" href="/index.css" />
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Manrope:wght@400;500;700&display=swap" />
</head>
<body>
  <div class="galileo-design">
    <div class="depth-0-frame-0">
      <div class="depth-1-frame-0">
        <div class="depth-2-frame-0">
          <div class="depth-3-frame-0">
            <div class="depth-4-frame-0">
              <div class="depth-5-frame-0">
                <div class="depth-6-frame-1">
                  <div class="depth-7-frame-0">
                    <div class="depth-8-frame-0">
                      <div class="depth-9-frame-0">
                        <img class="vector-0" alt="" src="./public/vector--0.svg" />
                        <div class="depth-10-frame-0"></div>
                      </div>
                    </div>
                    <div class="depth-8-frame-1">
                      <div class="depth-9-frame-01">
                        <div class="dashboard">Dashboard</div>
                      </div>
                    </div>
                  </div>
                  <div class="depth-7-frame-1">
                    <div class="depth-8-frame-0">
                      <div class="depth-9-frame-0">
                        <img class="vector-0" alt="" src="./public/vector--0.svg" />
                        <div class="depth-10-frame-01"></div>
                      </div>
                    </div>
                    <div class="depth-8-frame-11">
                      <div class="depth-9-frame-01">
                        <div class="dashboard">Tasks</div>
                      </div>
                    </div>
                  </div>
                  <div class="depth-7-frame-0">
                    <div class="depth-8-frame-0">
                      <div class="depth-9-frame-0">
                        <img class="vector-0" alt="" src="./public/vector--0.svg" />
                        <div class="depth-10-frame-02"></div>
                      </div>
                    </div>
                    <div class="depth-8-frame-12">
                      <div class="depth-9-frame-01">
                        <div class="dashboard">Calendar</div>
                      </div>
                    </div>
                  </div>
                  <div class="depth-7-frame-0">
                    <div class="depth-8-frame-0">
                      <div class="depth-9-frame-0">
                        <img class="vector-0" alt="" src="./public/vector--0.svg" />
                        <div class="depth-10-frame-03"></div>
                      </div>
                    </div>
                    <div class="depth-8-frame-13">
                      <div class="depth-9-frame-01">
                        <div class="dashboard">Teams</div>
                      </div>
                    </div>
                  </div>
                  <div class="depth-7-frame-0">
                    <div class="depth-8-frame-0">
                      <div class="depth-9-frame-0">
                        <img class="vector-0" alt="" src="./public/vector--0.svg" />
                        <div class="depth-10-frame-04"></div>
                      </div>
                    </div>
                    <div class="depth-8-frame-14">
                      <div class="depth-9-frame-01">
                        <div class="dashboard">Reports</div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="depth-5-frame-1">
                <div class="depth-6-frame-0">
                  <div class="depth-7-frame-01">
                    <div class="depth-9-frame-01">
                      <button class="dropdown-toggle">Create New Task</button>
                      <!-- Dropdown Menu -->
                      
                      <div id="custom-dropdown-menu" class="custom-dropdown-menu">
                        <form id="task-form" class="dropdown-form" method="POST">
                            <label for="project-name">Project/Work Name:</label>
                          <input type="text" id="project-name" name="project_name" placeholder="Your Project/Task Name" required>
                          <label for="description">Description:</label>
                          <textarea id="description" name="description" rows="4" required></textarea>
                          <label for="due-date">Due Date:</label>
                          <input type="date" id="due-date" name="due_date" required>
                          <label for="priority">Priority:</label>
                          <select id="priority" name="priority" required>
                            <option value="high">High</option>
                            <option value="medium">Medium</option>
                            <option value="low">Low</option>
                          </select>
                          <button type="submit">Create Task</button>
                        </form>
                      </div>
                      
                      <!-- End Dropdown Menu -->
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div class="depth-4-frame-1">
              <div class="depth-5-frame-01">
                <div class="depth-9-frame-01">
                  <b class="filters">Filters</b>
                </div>
              </div>
            </div>
            <div class="depth-4-frame-1">
              <div class="depth-5-frame-02">
                <div class="depth-9-frame-01">
                  <b class="filters">Projects</b>
                </div>
              </div>
            </div>
            <div class="depth-4-frame-3">
              <div class="depth-5-frame-03">
                <div class="depth-6-frame-03">
                  <div class="depth-9-frame-01">
                    <div class="dashboard">All</div>
                  </div>
                </div>
                <div class="depth-6-frame-11">
                  <div class="depth-7-frame-03">
                    <img class="vector-05" alt="" src="./public/vector--0.svg" />
                    <div class="depth-8-frame-06"></div>
                  </div>
                </div>
              </div>
              <div class="depth-5-frame-11">
                <div class="depth-6-frame-04">
                  <div class="depth-9-frame-01">
                    <div class="dashboard">Design</div>
                  </div>
                </div>
                <div class="depth-6-frame-11">
                  <div class="depth-7-frame-03">
                    <img class="vector-05" alt="" src="./public/vector--0.svg" />
                    <div class="depth-8-frame-06"></div>
                  </div>
                </div>
              </div>
              <div class="depth-5-frame-2">
                <div class="depth-6-frame-05">
                  <div class="depth-9-frame-01">
                    <div class="dashboard">Engineering</div>
                  </div>
                </div>
                <div class="depth-6-frame-11">
                  <div class="depth-7-frame-03">
                    <img class="vector-05" alt="" src="./public/vector--0.svg" />
                    <div class="depth-8-frame-06"></div>
                  </div>
                </div>
              </div>
              <div class="depth-5-frame-3">
                <div class="depth-6-frame-06">
                  <div class="depth-9-frame-01">
                    <div class="dashboard">Marketing</div>
                  </div>
                </div>
                <div class="depth-6-frame-11">
                  <div class="depth-7-frame-03">
                    <img class="vector-05" alt="" src="./public/vector--0.svg" />
                    <div class="depth-8-frame-06"></div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div class="depth-3-frame-1">
            <div class="depth-4-frame-01">
              <div class="depth-5-frame-04">
                <div class="depth-6-frame-07">
                  <div class="depth-9-frame-01">
                    <b class="my-tasks">Abdullah's Project</b>
                  </div>
                </div>
              </div>
              <div class="depth-5-frame-12">
                <div class="depth-6-frame-08">
                  <div class="depth-9-frame-01">
                    <div class="dashboard">View as list</div>
                  </div>
                </div>
              </div>
            </div>
            <!-- Dynamically inserted tasks start here -->
            <div id="task-container" data-tasks="<%= tasksData %>">
                <!-- Tasks will be inserted here -->
            </div>
            <!-- Dynamically inserted tasks end here -->
          </div>
        </div>
      </div>
    </div>
  </div>
<script>
 document.addEventListener("DOMContentLoaded", function() {
  // Function to dynamically generate HTML for each task
  function formatDueDate(dueDate) {
    const currentDate = new Date();
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1); // Get tomorrow's date

    const formattedDate = new Date(dueDate);

    if (formattedDate.toDateString() === currentDate.toDateString()) {
        return 'Today';
    } else if (formattedDate.toDateString() === tomorrow.toDateString()) {
        return 'Tomorrow';
    } else {
        // For other dates, you can customize the formatting as needed
        return formattedDate.toDateString(); // Or any other desired format
    }
}

  function generateTaskHTML(task) {
    const formattedDueDate = formatDueDate(task.duedate);

    return `
      <div class="depth-4-frame-11">
        <div class="depth-5-frame-05">
          <div class="depth-6-frame-09">
            <div class="depth-7-frame-012">
              <div class="depth-9-frame-01">
                <div class="finalize-copy-for">${task.projectName}</div>
              
                </div>

            </div>
            <div class="depth-7-frame-11">
              <div class="depth-9-frame-01">
                <div class="project-marketing-website">Description: ${task.description}</div>
              </div>
            </div>
            <div class="depth-7-frame-11">
              <div class="depth-9-frame-01">
                <div class="project-marketing-website">Priority: ${task.priority}</div>
              </div>
            </div>
          </div>
        </div>
        <div class="depth-5-frame-13">
          <div class="depth-6-frame-010">
            <div class="tomorrow">Due date : ${formattedDueDate}</div>
          </div>
        </div>
      </div>
      <div class="task-actions">
        <button class="edit-task" data-task-id="${task._id}">Edit</button>
        <button class="delete-task" data-task-id="${task._id}">Delete</button>
      </div>
    </div>

    `;
}

  // Function to display tasks
  function displayTasks(tasks) {
    const container = document.getElementById('task-container');
    container.innerHTML = ''; // Clear the container before adding new tasks
    tasks.forEach(task => {
      const taskHTML = generateTaskHTML(task);
      container.insertAdjacentHTML('beforeend', taskHTML);
    });
  }
 
  
  
//using theses two container to fetch the task id thru the event listerns attach to the coed 

const taskContainer = document.getElementById('task-container');
taskContainer.addEventListener('click', event => {
    if (event.target.classList.contains('edit-task')) {
        const taskId = event.target.getAttribute('data-task-id');
        console.log("Edit button clicked for Task ID:", taskId);
        // Call function to handle editing task with taskId
        editTask(taskId);
    }
});



  // Function to handle deleting tasks
  taskContainer.addEventListener('click', event => {
    if (event.target.classList.contains('delete-task')) {
        const taskIdDel = event.target.getAttribute('data-task-id');
        console.log("Delete button clicked for Task ID:", taskIdDel);
        // Call function to handle deleting task with taskId
        deleteTask(taskIdDel);
    }
  });


  function findTaskById(tasksData, taskId) {
    // Check if tasksData is defined and not empty
    if (!tasksData || tasksData.length === 0) {
        console.error('Tasks data is empty or undefined.');
        return null;
    }

    // Find the task with the given taskId
    const taskToUpdate = tasksData.find(task => task._id === taskId);
    
    // Check if taskToUpdate is found
    if (!taskToUpdate) {
        console.error(`Task with ID ${taskId} not found.`);
        return null;
    }
    
    return taskToUpdate;
}



function saveUpdatedTask(updatedTask) {
    const url = `/home/task/${updatedTask._id}`;
    const options = {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(updatedTask)
    };
    fetch(url, options)
    .then(response => {
        if (!response.ok) {
            throw new Error(`Failed to update task. Server responded with status ${response.status}: ${response.statusText}`);
        }
        return response.json(); // Parse response body as JSON
    })
    .then(updatedTask => {
        // Update the task on the page with the new data
        updateTaskOnPage(updatedTask);
        console.log('Task updated successfully.');
    })
    .catch(error => {
        console.error('Error updating task:', error.message);
    });
}

function updateTaskOnPage(updatedTask) {
    // Find the existing task element on the page
    const existingTaskElement = document.querySelector(`[data-task-id="${updatedTask._id}"]`);
    if (!existingTaskElement) {
        console.error(`Task element with ID ${updatedTask._id} not found.`);
        return;
    }

    // Update the task element with the new data
    existingTaskElement.innerHTML = generateTaskHTML(updatedTask);
}


function editTask(taskId) {
    // Find the task to edit
    // Find the task to edit
    const taskToUpdate = findTaskById(tasksData, taskId);    
    if (!taskToUpdate) {
        console.error(`Task with ID ${taskId} not found.`);
        return;
    }


    // Create the edit form
    const editForm = document.createElement('form');
    editForm.id = 'edit-form';
    editForm.classList.add('edit-form');
    
    // Populate the edit form with task data
    editForm.innerHTML = `
        <label for="edit-project-name">Project/Work Name:</label>
        <input type="text" id="edit-project-name" name="edit_project_name" value="${taskToUpdate.projectName}" required>
        <label for="edit-description">Description:</label>
        <textarea id="edit-description" name="edit_description" rows="4" required>${taskToUpdate.description}</textarea>
        <label for="edit-due-date">Due Date:</label>
        <input type="date" id="edit-due-date" name="edit_due_date" value="${taskToUpdate.dueDate}" required>
        <label for="edit-priority">Priority:</label>
        <select id="edit-priority" name="edit_priority" required>
            <option value="high" ${taskToUpdate.priority === 'high' ? 'selected' : ''}>High</option>
            <option value="medium" ${taskToUpdate.priority === 'medium' ? 'selected' : ''}>Medium</option>
            <option value="low" ${taskToUpdate.priority === 'low' ? 'selected' : ''}>Low</option>
        </select>
        <button type="submit">Save Changes</button>
    `;
    
    // Append the edit form to the document body
    document.body.appendChild(editForm);
    
    // Add event listener for form submission
    editForm.addEventListener('submit', event => {
        event.preventDefault();
        
        // Retrieve updated values from the form fields
        const updatedProjectName = editForm.querySelector('#edit-project-name').value;
        const updatedDescription = editForm.querySelector('#edit-description').value;
        const updatedDueDate = editForm.querySelector('#edit-due-date').value;
        const updatedPriority = editForm.querySelector('#edit-priority').value;
        
        // Update the task with the new values
        taskToUpdate.projectName = updatedProjectName;
        taskToUpdate.description = updatedDescription;
        taskToUpdate.dueDate = updatedDueDate;
        taskToUpdate.priority = updatedPriority;
        
        // Save the updated task (e.g., send an AJAX request to update the task on the server)
        saveUpdatedTask(taskToUpdate); // Implement this function to save the updated task
        
        // Remove the edit form from the document body
        editForm.remove();
    });
}


// Function to handle deleting a task
function deleteTask(taskIdDel) {
    // Implement the logic to delete the task with the given taskId
    console.log("Deleting task with ID:", taskIdDel);
}
  // Call the function to display tasks with the data passed from the server
  const tasksData = JSON.parse(document.getElementById('task-container').getAttribute('data-tasks'));
  displayTasks(tasksData);
});

  
    // Function to toggle visibility of dropdown menu when "Create a new task" button is clicked
document.querySelector('.dropdown-toggle').addEventListener('click', function(event) {
  event.stopPropagation(); // Prevents the click event from bubbling up to the document body
  var dropdownMenu = document.getElementById("custom-dropdown-menu");
  dropdownMenu.style.display = dropdownMenu.style.display === 'block' ? 'none' : 'block';
});

// Function to close dropdown menu when clicking outside of the form
document.body.addEventListener('click', function(event) {
  var dropdownMenu = document.getElementById("custom-dropdown-menu");
  if (event.target !== dropdownMenu && !dropdownMenu.contains(event.target)) {
    dropdownMenu.style.display = 'none';
  }
});

  </script>
</body>
</html>